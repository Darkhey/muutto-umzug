import { useState, useEffect } from 'react'
import { supabase } from '@/integrations/supabase/client'
import { Database } from '@/types/database'
import { useAuth } from '@/contexts/AuthContext'
import { APP_CONFIG } from '@/config/app'
import { useToast } from '@/hooks/use-toast'

type Household = Database['public']['Tables']['households']['Row']
type HouseholdInsert = Database['public']['Tables']['households']['Insert']

export function useHouseholds() {
  const { user } = useAuth()
  const { toast } = useToast()
  const [households, setHouseholds] = useState<Household[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const fetchHouseholds = async () => {
    if (!user) return

    try {
      setLoading(true)
      setError(null)
      
      const { data, error } = await supabase
        .from('households')
        .select('*')
        .order('created_at', { ascending: false })

      if (error) throw error
      setHouseholds(data || [])
    } catch (err) {
      console.error('Error fetching households:', err)
      setError(err instanceof Error ? err.message : 'Ein Fehler ist aufgetreten')
      toast({
        title: "Fehler beim Laden der Haushalte",
        description: err instanceof Error ? err.message : 'Ein unbekannter Fehler ist aufgetreten',
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }

  const createHousehold = async (householdData: Omit<HouseholdInsert, 'created_by' | 'invitation_code'>) => {
    if (!user) throw new Error('Benutzer ist nicht angemeldet')

    // Validate household size limits
    if (householdData.household_size && householdData.household_size > APP_CONFIG.defaults.maxMembersPerHousehold) {
      throw new Error(`Haushaltsgröße darf ${APP_CONFIG.defaults.maxMembersPerHousehold} Personen nicht überschreiten`)
    }

    try {
      // Create household with auto-generated invitation code
      const { data: household, error: householdError } = await supabase
        .from('households')
        .insert({
          ...householdData,
          created_by: user.id,
          invitation_code: '' // Will be auto-generated by trigger
        })
        .select()
        .single()

      if (householdError) throw householdError

      // Add creator as owner member
      const { error: memberError } = await supabase
        .from('household_members')
        .insert({
          household_id: household.id,
          user_id: user.id,
          name: user.user_metadata?.full_name || user.email || 'Unbenannt',
          email: user.email || '',
          is_owner: true,
          joined_at: new Date().toISOString()
        })

      if (memberError) {
        console.error('Error creating owner member:', memberError)
        throw memberError
      }

      // Create initial tasks from templates
      try {
        const { data: taskCount, error: taskError } = await supabase.rpc('create_initial_tasks', {
          p_household_id: household.id
        })

        if (taskError) {
          console.warn('Error creating initial tasks:', taskError)
          // Don't throw here, household creation should still succeed
        } else {
          console.log(`Created ${taskCount} initial tasks`)
        }
      } catch (taskErr) {
        console.warn('Error creating initial tasks:', taskErr)
        // Don't throw here, household creation should still succeed
      }

      toast({
        title: "Haushalt erstellt",
        description: `${household.name} wurde erfolgreich erstellt.`
      })

      await fetchHouseholds()
      return household
    } catch (err) {
      console.error('Error creating household:', err)
      throw err instanceof Error ? err : new Error('Fehler beim Erstellen des Haushalts')
    }
  }

  const addMembers = async (householdId: string, members: Array<{
    name: string
    email: string
    role?: string
  }>) => {
    try {
      // Validate member limits
      const { data: existingMembers } = await supabase
        .from('household_members')
        .select('id')
        .eq('household_id', householdId)

      const currentMemberCount = existingMembers?.length || 0
      if (currentMemberCount + members.length > APP_CONFIG.defaults.maxMembersPerHousehold) {
        throw new Error(`Maximale Anzahl von ${APP_CONFIG.defaults.maxMembersPerHousehold} Mitgliedern erreicht`)
      }

      const memberInserts = members.map(member => ({
        household_id: householdId,
        name: member.name,
        email: member.email,
        role: member.role || null,
        is_owner: false,
        invited_at: new Date().toISOString()
      }))

      const { error } = await supabase
        .from('household_members')
        .insert(memberInserts)

      if (error) throw error

      toast({
        title: "Mitglieder eingeladen",
        description: `${members.length} Mitglied(er) wurden erfolgreich eingeladen.`
      })
    } catch (err) {
      console.error('Error adding members:', err)
      throw err instanceof Error ? err : new Error('Fehler beim Hinzufügen der Mitglieder')
    }
  }

  const updateHousehold = async (
    householdId: string,
    updates: Database['public']['Tables']['households']['Update']
  ) => {
    try {
      const { data, error } = await supabase
        .from('households')
        .update({ ...updates, updated_at: new Date().toISOString() })
        .eq('id', householdId)
        .select()
        .single()

      if (error) throw error

      toast({
        title: "Haushalt aktualisiert",
        description: "Die Änderungen wurden erfolgreich gespeichert."
      })

      await fetchHouseholds()
      return data
    } catch (err) {
      console.error('Error updating household:', err)
      throw err instanceof Error ? err : new Error('Fehler beim Aktualisieren des Haushalts')
    }
  }

  useEffect(() => {
    fetchHouseholds()
  }, [user])

  return {
    households,
    loading,
    error,
    createHousehold,
    addMembers,
    updateHousehold,
    refetch: fetchHouseholds
  }
}